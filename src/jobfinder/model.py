import pandas as pd
from pydantic import BaseModel, field_validator, validator
from datetime import date
from typing import Optional

# generated by datamodel-codegen:
#   filename:  jobs_data.csv
#   timestamp: 2025-06-25T19:23:52+00:00

class FoundJob(BaseModel):
    id: str | None = None
    site: str | None = None
    job_url: str | None = None
    job_url_direct: str | None = None
    title: str | None = None
    company: str | None = None
    location: str | None = None
    date_posted: date | None = None
    job_type: str | None = None
    salary_source: str | None = None
    interval: str | None = None
    min_amount: float | None = None
    max_amount: float | None = None
    currency: str | None = None
    is_remote: bool | None = None
    job_level: str | None = None
    job_function: str | None = None
    listing_type: str | None = None
    emails: str | None = None
    description: str | None = None
    company_industry: str | None = None
    company_url: str | None = None
    company_logo: str | None = None
    company_url_direct: str | None = None
    company_addresses: str | None = None
    company_num_employees: str | None = None
    company_revenue: str | None = None
    company_description: str | None = None
    skills: str | None = None
    experience_range: str | None = None
    company_rating: str | None = None
    company_reviews_count: str | None = None
    vacancy_count: str | None = None
    work_from_home_type: str | None = None
    #
    viewed: bool | None = None
    notes: str | None = None
    date_scraped: str | None = None
    #
    #
    status: str  = ""

    @property
    def name(self) -> str:
        return f"{self.status} {self.title} - {self.company}"


    # Custom validator here
    @field_validator('*',mode='before')
    def allow_none(cls, v):
        if v is None or pd.isna(v):
             return None
        else:
            return v


# class Compensation(BaseModel):
#     interval: Optional[CompensationInterval] = None
#     min_amount: float | None = None
#     max_amount: float | None = None
#     currency: Optional[str] = "USD"

# class JobPost(BaseModel):
#     id: str | None = None
#     title: str
#     company_name: str | None
#     job_url: str
#     job_url_direct: str | None = None
#     location: Optional[str]

#     description: str | None = None
#     company_url: str | None = None
#     company_url_direct: str | None = None

#     job_type: list[str] | None = None
#     compensation: Compensation | None = None
#     date_posted: date | None = None
#     emails: list[str] | None = None
#     is_remote: bool | None = None
#     listing_type: str | None = None

#     # LinkedIn specific
#     job_level: str | None = None

#     # LinkedIn and Indeed specific
#     company_industry: str | None = None

#     # Indeed specific
#     company_addresses: str | None = None
#     company_num_employees: str | None = None
#     company_revenue: str | None = None
#     company_description: str | None = None
#     company_logo: str | None = None
#     banner_photo_url: str | None = None

#     # LinkedIn only atm
#     job_function: str | None = None

#     # Naukri specific
#     # skills: list[str] | None = None  #from tagsAndSkills
#     # experience_range: str | None = None  #from experienceText
#     # company_rating: float | None = None  #from ambitionBoxData.AggregateRating
#     # company_reviews_count: int | None = None  #from ambitionBoxData.ReviewsCount
#     # vacancy_count: int | None = None  #from vacancy
#     # work_from_home_type: str | None = None  #from clusters.wfhType (e.g., "Hybrid", "Remote")



